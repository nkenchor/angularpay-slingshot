#!/usr/bin/env bash

ARG_ENVIRONMENT=${1:-dev}
ARG_SERVICE_LIST_FILE=${2:-/home/dornu/angularpay.services.list}
ARG_TEST_RUN_CONFIGURATION=$3
ARG_TEST_RUN_DIR=$4
ARG_DO_REINSTALL=$5
ARG_MKDIR_ONLY=$6

echo "$ARG_ENVIRONMENT"
echo "$ARG_SERVICE_LIST_FILE"
echo "$ARG_TEST_RUN_CONFIGURATION"
echo "$ARG_TEST_RUN_DIR"
echo "$ARG_DO_REINSTALL"
echo "$ARG_MKDIR_ONLY"

function create_directories() {
    SERVICE_NAME=$1
    SERVICE_TYPE=$2
    ### AngularPay Service Directories ##
    BASE_DIR="/angularpay/services"
    SERVICE_DIR="${BASE_DIR}/${SERVICE_NAME}"
    NODEJS_BUILD_DIR="${SERVICE_DIR}/build"
    SERVICE_LOGS_DIR="${SERVICE_DIR}/logs"
    PM2_CONFIG_DIR="${SERVICE_DIR}/pm2/config"

    if [ ! -d "$BASE_DIR" ];
        then 
		echo "$BASE_DIR does not exist! Creating it..."
		mkdir -p "$BASE_DIR"
	else
		echo "$BASE_DIR already exist. Moving on..."
    fi
    if [ ! -d "$SERVICE_DIR" ];
        then 
		echo "$SERVICE_DIR does not exist! Creating it..."
		mkdir -p "$SERVICE_DIR"
	else
		echo "$SERVICE_DIR already exist. Moving on..."
    fi
    if [ "$SERVICE_TYPE" == "nodejs" -a ! -d "$NODEJS_BUILD_DIR" ];
        then
		echo "$NODEJS_BUILD_DIR does not exist! Creating it..."
		mkdir -p "$NODEJS_BUILD_DIR"
	else
		echo "$NODEJS_BUILD_DIR already exist. Moving on..."
    fi
    if [ ! -d "$SERVICE_LOGS_DIR" ];
        then 
		echo "$SERVICE_LOGS_DIR does not exist! Creating it..."
		mkdir -p "$SERVICE_LOGS_DIR"
	else
		echo "$SERVICE_LOGS_DIR already exist. Moving on..."
    fi
    if [ "$SERVICE_TYPE" == "nodejs" -a ! -d "$PM2_CONFIG_DIR" ];
    then
	    echo "$PM2_CONFIG_DIR does not exist! Creating it..."
	    mkdir -p "$PM2_CONFIG_DIR"
    else
	    echo "$PM2_CONFIG_DIR already exist. Moving on..."
    fi
}

function create_service_files() {
    SERVICE_NAME=$1
    SERVICE_TYPE=$2
    ENVIRONMENT_NAME=$3
    TEST_RUN_CONFIGURATION=$4
    TEST_RUN_DIR=$5
	DO_REINSTALL=$6

    BASE_DIR="/angularpay/services"
    SERVICE_DIR="${BASE_DIR}/${SERVICE_NAME}"
    NODEJS_BUILD_DIR="${SERVICE_DIR}/build"
    SERVICE_LOGS_DIR="${SERVICE_DIR}/logs"
    PM2_CONFIG_DIR="${SERVICE_DIR}/pm2/config"

    if [ "$TEST_RUN_CONFIGURATION" -eq 1 ];
    then
	    mkdir -p "$TEST_RUN_DIR"
	    SERVICE_FILE="${TEST_RUN_DIR}/${SERVICE_NAME}.service"
	    PM2_SERVICE_FILE="${TEST_RUN_DIR}/${SERVICE_NAME}.service.json"
    else
	    SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
	    PM2_SERVICE_FILE="${PM2_CONFIG_DIR}/${SERVICE_NAME}.service.json"
    fi

    echo "Configuring $SERVICE_NAME for $ENVIRONMENT_NAME environment"

    ### create service file for java applications
    if [ $SERVICE_TYPE == "java" ];
    then		
	    echo "Stopping service $SERVICE_NAME"
	    sudo systemctl stop "$SERVICE_NAME.service"

	    if [ "$DO_REINSTALL" -eq 1 ]; 
	    then
		    echo "Deleting service $SERVICE_NAME"
		    sudo rm "$SERVICE_FILE"
	    fi

	    if [ ! -f "$SERVICE_FILE" ];
    	    then
    		    echo "$SERVICE_FILE [java service file] does not exist. Creating it..."
### Write into the service file ##
echo '[Unit]
Description='${SERVICE_NAME}' Service
After=network.target
[Service]
WorkingDirectory='${SERVICE_DIR}'
#path to executable.
#executable is a bash script which calls jar file
ExecStart=/bin/bash -c "/usr/bin/java -Dspring.profiles.active='${ENVIRONMENT_NAME}' \
   -jar '${SERVICE_DIR}'/'${SERVICE_NAME}'.jar 2>&1 >> '${SERVICE_LOGS_DIR}'/'${SERVICE_NAME}'.log \
   & echo $! > '${SERVICE_DIR}'/'${SERVICE_NAME}'.pid"
PIDFile='${SERVICE_DIR}'/'${SERVICE_NAME}'.pid
Restart=always
Type=simple
User=root
RestartSec=40
[Install]
WantedBy=multi-user.target' | sudo tee "$SERVICE_FILE"
			echo "daemon-reload"
			sudo systemctl daemon-reload
			echo "starting $SERVICE_NAME"
			sudo systemctl start "$SERVICE_NAME.service"
	    else 
		    echo "$SERVICE_FILE [java service file] already exist. Moving on..."
		    if [ "$TEST_RUN_CONFIGURATION" -eq 0 ];
		    then
			    echo "restarting $SERVICE_NAME"
			    sudo systemctl restart "$SERVICE_NAME.service"
		    fi
	    fi
    else
	    if [ ! -f "$PM2_SERVICE_FILE" ];
	    then
		    echo "$PM2_SERVICE_FILE [PM2 configuration] does not exist. Creating it..."
### Write into PM2 configuration file
echo '{
    "apps": [{
            "name": "'${SERVICE_NAME}'",
            "cwd": "'${NODEJS_BUILD_DIR}'",
            "script": "server.js",
            "watch": false,
            "env": {
                "NODE_ENV": "'${ENVIRONMENT_NAME}'"
            },
            "exec_mode": "cluster",
            "instances": 2,
            "out_file": "'${SERVICE_LOGS_DIR}'/output.log",
            "error_file": "'${SERVICE_LOGS_DIR}'/error.log",
            "log_date_format": "YYYY-MM-DD HH:mm:ss",
            "merge_logs": true,
            "log_type": "json"
        }
    ]
}' | sudo tee "$PM2_SERVICE_FILE"
	    else
		    echo "$PM2_SERVICE_FILE [PM2 configuration] already exist. Moving on..."
	    fi
    fi
}

## read services from file into an array
IFS=$'\n' read -d '' -r -a services < $ARG_SERVICE_LIST_FILE

echo "-----------------------------------------------------------"
printf '%s\n' "${services[@]}"

## now loop through the above array of services
for i in "${services[@]}"
do
    SERVICE_NAME_TYPE_ARR=(${i//./ })
    SERVICE_NAME=${SERVICE_NAME_TYPE_ARR[0]}
    SERVICE_TYPE=${SERVICE_NAME_TYPE_ARR[1]}
	
    if [[ -z "$SERVICE_TYPE" || "$SERVICE_TYPE" == "undefined" || ( "$SERVICE_TYPE" != "java" && "$SERVICE_TYPE" != "nodejs" ) ]];
    then
	    echo "-----------------------------------------------------------"
	    echo "Skipping undefined or unrecognized service type for $i"
	    continue
    fi

    echo "-----------------------------------------------------------"
    echo "-----------------------------------------------------------"
    echo "Provisioning $SERVICE_NAME $SERVICE_TYPE application"
    echo "-----------------------------------------------------------"
    create_directories $SERVICE_NAME $SERVICE_TYPE

    if [ "$ARG_MKDIR_ONLY" -eq 1 ]; 
    then
	    echo "-----------------------------------------------------------"
	    echo "ALL DONE!!!"
	    echo "-----------------------------------------------------------"
	    continue
    fi

    create_service_files $SERVICE_NAME $SERVICE_TYPE $ARG_ENVIRONMENT $ARG_TEST_RUN_CONFIGURATION $ARG_TEST_RUN_DIR $ARG_DO_REINSTALL
done

echo "-----------------------------------------------------------"
echo "ALL DONE!!!"
echo "-----------------------------------------------------------"

